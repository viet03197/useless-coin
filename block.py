"""
    BLOCK STRUCTURE FOR BLOCKCHAIN
    Each block is represented by a json file
    - hash (SHA256 hash): hash generated from the JSON representation of a block
"""
import hashlib
import json

class Block():
    def __init__(self, data, root, id, prev):
        self.data = data
        self.root = root
        self.id = id
        #self.nonce = nonce
        self.prev = prev
        self.hash = self.get_hash()
    
    def generate_string(self):
        """ Generate a string object of the block (to be used for hash)
            JSON is only preference. We can also use Marshal or Pickle
        """
        json_str = json.dumps({"data":self.data, "root":self.root, "prev":self.prev})
        return json_str
    
    def get_hash(self):
        """ Generate hash from the generated byte-encoded object string
        """
        return hashlib.md5(self.generate_string().encode()).hexdigest()
    
    def mine(self, data):
        """ Generate next block which will store new data. 
            Current hash is the next.prev
        """
        return Block(data, self.root, self.id+1, self.hash)
    
    def adjust_diff(self):
        """ TODO implement difficulty auto adjustment if possible
        """
        return